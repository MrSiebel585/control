#!/bin/bash

# ─── OMNISCIENT FRAMEWORK CLI ───────────────────────────────────────────────

# Auto-source the environment
[ -f /opt/omniscient/.env ] && source /opt/omniscient/.env
source /opt/omniscient/.autoenv/activate.sh


OMNIROOT="/opt/omniscient"
SCRIPT_DIRS=("ai" "core" "bin" "menus" "modules" "malformed" "offensive" "system" "scripts" "osint" "logs")


OMNIDIR="/opt/omniscient/control/omniscientctl.d"

# Load drop-ins
for f in "$OMNIDIR"/*.bash; do
    [[ -f "$f" ]] && source "$f"
done

# Dispatcher
case "$1" in
    ai|ai-pipe) cmd_ai_pipe "${@:2}" ;;
    backup|backupctl) cmd_backupctl "${@:2}" ;;
    *) echo "Unknown command: $1"; exit 1 ;;
esac



OMNIROOT="/opt/omniscient"
CONF="$OMNIROOT/omniscient.conf"
LOG="$OMNIROOT/logs/omniscientctl.log"
mkdir -p "$(dirname "$LOG")"
echo "[+] OmniscientCTL invoked at $(date) with args: $*" >> "$LOG"


browse_directories() {
  echo -e "\n📂 Available Script Categories:"
  select dir in "${SCRIPT_DIRS[@]}" "Back"; do
    if [[ "$dir" == "Back" ]]; then
      show_menu
      return
    fi

    TARGET="$OMNIROOT/$dir"
    if [[ -d "$TARGET" ]]; then
      echo -e "\n📁 $dir Directory Contents:"
      files=("$TARGET"/*.sh "$TARGET"/*.bash)
      select file in "${files[@]}" "Back"; do
        if [[ "$file" == "Back" ]]; then
          browse_directories
          return
        elif [[ -f "$file" ]]; then
          echo -e "\n🚀 Executing: $file\n"
          log_action "Executing user script: $file"
          bash "$file"
          break
        else
          echo "Invalid selection. Try again."
        fi
      done
    else
      echo "[✘] Directory not found: $TARGET"
    fi
    break
  done
}


show_menu() {
  echo -e "\n🧠 Omniscient Control Panel"
  echo "────────────────────────────"
  echo "1) View system environment"
  echo "2) Run AI summary process"
  echo "3) Trigger scheduled maintenance"
  echo "4) Start core services"
  echo "5) Restart core services"
  echo "6) Stop core services"
  echo "7) Check service health"
  echo "8) Show system status"
  echo "9) Run plugins"
  echo "10) Explore script directories"
  echo "11) Exit"
  echo "────────────────────────────"
  read -p "Enter selection: " choice
  case $choice in
    1) view_environment;;
    2) run_summary;;
    3) trigger_maintenance;;
    4) start_services;;
    5) restart_services;;
    6) stop_services;;
    7) health_check;;
    8) show_status;;
    9) run_plugins;;
    10) browse_directories;;
    11) exit 0;;
    *) echo "Invalid option"; sleep 1; show_menu;;
  esac
}



# Load config values with crudini if available
if command -v crudini &> /dev/null && [[ -f "$CONF" ]]; then
    MODEL=$(crudini --get "$CONF" models MODEL_BACKEND 2>/dev/null || echo "gpt4all")
    LOG_LEVEL=$(crudini --get "$CONF" core LOG_LEVEL 2>/dev/null || echo "INFO")
    OLLAMA_API=$(crudini --get "$CONF" ollama API_URL 2>/dev/null || echo "http://localhost:11434/api/generate")
else
    MODEL="gpt4all"
    LOG_LEVEL="INFO"
    OLLAMA_API="http://localhost:11434/api/generate"
fi

# Activate Python virtual environment
if [[ -z "$VIRTUAL_ENV" ]]; then
    for path in "$OMNIROOT/venv/bin/activate" "$OMNIROOT/bin/activate" "$OMNIROOT/.env/bin/activate"; do
        [[ -f "$path" ]] && source "$path" && break
    done
fi

# --------------------------
# Module auto-registration
# --------------------------
MODULE_DIR="$OMNIROOT/modules"
declare -A MODULES=()

if [[ -d "$MODULE_DIR" ]]; then
    for mod_file in "$MODULE_DIR"/mod_*.sh; do
        [[ -f "$mod_file" ]] || continue
        mod_basename=$(basename "$mod_file" .sh)
        mod_name=${mod_basename#mod_}

        # Check if module enabled in config (default true)
        enabled="true"
        if command -v crudini &> /dev/null && [[ -f "$CONF" ]]; then
            enabled=$(crudini --get "$CONF" modules "$mod_name" 2>/dev/null || echo "true")
        fi

        if [[ "$enabled" == "true" ]]; then
            source "$mod_file"
            MODULES["$mod_name"]="mod_${mod_name}"
        fi
    done
fi

# --------------------------
# Helper functions
# --------------------------

log_action() {
  echo "[$(date +'%F %T')] $1" | tee -a "$PROMPT_LOG"
}

# --------------------------
# Rsyslog command wrappers
# --------------------------

rsyslog_start() {
  sudo systemctl start rsyslog
  echo "rsyslog service started."
}

rsyslog_stop() {
  sudo systemctl stop rsyslog
  echo "rsyslog service stopped."
}

rsyslog_restart() {
  sudo systemctl restart rsyslog
  echo "rsyslog service restarted."
}

rsyslog_status() {
  sudo systemctl status rsyslog
}

rsyslog_reload() {
  sudo systemctl reload rsyslog
  echo "rsyslog service reloaded."
}

show_help() {
    echo -e "\nOmniscient CLI Usage:\n"
    echo "  omniscientctl <command> [args...]"
    echo
    echo "Available commands from modules:"
    for cmd in "${!MODULES[@]}"; do
        help_func="mod_${cmd}_help"
        if declare -f "$help_func" > /dev/null; then
            echo -n "  $cmd - "
            $help_func
        else
            echo "  $cmd"
        fi
    done
    echo
    echo "Additional commands:"
    echo "  prompt \"<text>\" [engine]   Send prompt to engine (gpt4all, ollama, openai)"
    echo "  omnieye-module              Run the Omnieye subsystem"
    echo "  logs                       Tail last 50 log entries"
    echo "  version                    Show module versions"
    echo "  test-module <mod>          Run tests for module"
    echo "  help                       Show this help message"
    echo
}

show_versions() {
    echo "Omniscient Framework Modules Versions:"
    for cmd in "${!MODULES[@]}"; do
        # try to print MOD_VERSION if set
        mod_version_var="MOD_VERSION"
        # We rely on modules sourced already, so MOD_VERSION should be set per module
        # We prefix variable by mod_name to avoid conflicts
        version_var_name="MOD_VERSION_${cmd}"
        # fallback to generic MOD_VERSION if unique version vars aren't used
        version="${MOD_VERSION:-unknown}"

        # Check if module defines its own MOD_VERSION variable prefixed by module name
        version="$(eval echo \${MOD_VERSION_${cmd}:-$version})"
        echo "  $cmd : $version"
    done
}

run_module_test() {
    local mod="$1"
    local test_func="mod_${mod}_test"

    if [[ -z "$mod" ]]; then
        echo "[✘] Specify a module to test"
        return 1
    fi

    if ! declare -f "$test_func" > /dev/null; then
        echo "[!] No tests defined for module '$mod'"
        return 1
    fi

    echo "[*] Running tests for module '$mod'..."
    $test_func
}

# --------------------------
# Interactive Menu Functions
# --------------------------

() {
  echo -e "\n🧠 Omniscient Control Panel"
  echo "────────────────────────────"
  echo "1) View system environment"
  echo "2) Run AI summary process"
  echo "3) Trigger scheduled maintenance"
  echo "4) Start core services"
  echo "5) Show system status"
  echo "6) Exit"
  echo "────────────────────────────"
  read -p "Enter selection: " choice
  case $choice in
    1) view_environment;;
    2) run_summary;;
    3) trigger_maintenance;;
    4) start_services;;
    5) show_status;;
    6) exit 0;;
    *) echo "Invalid option"; sleep 1; show_menu;;
  esac
}

view_environment() {
  log_action "Displaying Omniscient environment"
  env | grep -E 'OMNISCIENT_|SUMMARY_LOG|PROMPT_LOG|DEFAULT_MODEL|OLLAMA_API|IP_ADDRESS|GATEWAY|DNS_SERVERS'
  show_menu
}

run_summary() {
  log_action "Invoking AI summary process..."
  echo "[AI] Generating daily summary..."
  echo "Summary written to: $SUMMARY_LOG"
  echo "" >> "$SUMMARY_LOG"
  echo "[$(date +'%F %T')] Auto summary: All systems nominal." >> "$SUMMARY_LOG"
  sleep 1
  show_menu
}

trigger_maintenance() {
  log_action "Triggering scheduled maintenance via: $PERIODIC_MAINTENANCE"
  if [[ -x "$PERIODIC_MAINTENANCE" ]]; then
    bash "$PERIODIC_MAINTENANCE"
  else
    echo "Maintenance script not found or not executable."
  fi
  show_menu
}

start_services() {
  log_action "Starting core services: $SERVICES_TO_ENABLE"
  IFS=',' read -ra SERVICES <<< "$SERVICES_TO_ENABLE"
  for service in "${SERVICES[@]}"; do
    echshow_menuo "Starting $service..."
    sudo systemctl start "$service"
  done
  show_menu
}

show_status() {
  log_action "Gathering system status info"
  echo "Uptime: $(uptime -p)"
  echo "IP: $(hostname -I | awk '{print $1}')"
  echo "Disk:"
  df -h | grep -E '/$|/opt|/var'
  echo "Memory:"
  free -h | grep -v Swap
  show_menu
}

# --------------------------
# CLI Entry Point
# --------------------------

if [[ -z "$1" ]]; then
    clear
    show_menu
    exit 0
fi

case "$1" in
    help)
        show_help
        exit 0
        ;;
    version)
        show_versions
        exit 0
        ;;
    test-module)
        shift
        run_module_test "$1"
        exit $?
        ;;
    prompt)
        prompt_text="$2"
        engine="${3:-$MODEL}"

        if [[ -z "$prompt_text" ]]; then
            echo "[✘] Please provide prompt text."
            exit 1
        fi

        if [[ "$engine" == "ollama" ]]; then
            response=$(curl -s -X POST "$OLLAMA_API" \
                -H "Content-Type: application/json" \
                -d "{\"model\": \"$MODEL\", \"prompt\": \"$prompt_text\"}")
            echo -e "\033[1;32mAI (Ollama):\033[0m $(echo "$response" | jq -r '.response // .result')"
        elif [[ "$engine" == "openai" ]]; then
            python3 -c "
import os, sys, openai
openai.api_key = os.getenv('OPENAI_API_KEY')
try:
    completion = openai.ChatCompletion.create(
        model='$MODEL',
        messages=[{'role': 'user', 'content': '$prompt_text'}]
    )
    print('\033[1;32mAI (OpenAI):\033[0m ' + completion.choices[0].message.content.strip())
except Exception as e:
    print('[✘] OpenAI request failed:', e)
"
        else
            # default or gpt4all or any other model, just run python script or binary
            python3 -c "
import sys
print(f'AI ({engine}): {prompt_text}')
# Placeholder for other engine integrations
"
        fi
        exit 0
        ;;
    omnieye-module)
        bash "$OMNIROOT/omnieye-blackbox/omnieye_module.sh"
        exit $?
        ;;
    logs)
        tail -n 50 "$LOG"
        exit 0
        ;;
    rsyslog)
        shift
        case "$1" in
            start)
                rsyslog_start
                ;;
            stop)
                rsyslog_stop
                ;;
            restart)
                rsyslog_restart
                ;;
            status)
                rsyslog_status
                ;;
            reload)
                rsyslog_reload
                ;;
            *)
                echo "Usage: omniscientctl rsyslog {start|stop|restart|status|reload}"
                exit 1
                ;;
        esac
        exit 0
        ;;
    *)
        # Try to run module command if exists
        cmd="$1"
        if [[ -n "${MODULES[$cmd]}" ]]; then
            func="${MODULES[$cmd]}"
            shift
            $func "$@"
            exit $?
        else
            echo "[✘] Unknown command: $cmd"
            echo "Run 'omniscientctl help' for usage."
            exit 1
        fi
        ;;
esac
